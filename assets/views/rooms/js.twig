<script type="text/javascript" src="/static/lib/dhtmlxScheduler/dhtmlxscheduler.js"></script>
<script type="text/javascript" src="/static/lib/dhtmlxScheduler/ext/dhtmlxscheduler_units.js"></script>
<script type="text/javascript" src="/static/lib/dhtmlxScheduler/ext/dhtmlxscheduler_limit.js"></script>
<script type="text/javascript" charset="utf-8">
  'use strict';
  function init($) {
    var event_handler = new function () {
      var event_handler = this;
      var edit_selected_date_from, edit_selected_date_to;

      this.scheduler = window.scheduler;
      this.handler_helper = function (event_type) {
        return function (event_id, event_object) {
          return event_handler.handler(event_type, event_id, event_object);
        };
      };

      this.handler = function (event_type, event_id, event_object) {
        if (this.hasOwnProperty(event_type)) {
          return this[event_type](event_id, event_object);
        } else {
          throw 'not exist handler ' + event_type;
        }
      };
      this.beforeEdit = function (event_id, event) {
        if (event.group) {
          return false;
        }

        if (String(event_id).indexOf('#') >= 0) {
          return false;
        }
        try {
          edit_selected_date_from = new Date(event_handler.scheduler.getEventStartDate(event_id));
          edit_selected_date_to = new Date(event_handler.scheduler.getEventEndDate(event_id));
        } catch (e) {
        }

        return true;
      };

      this.afterEdit = function (event_id) {
        if (this.isDuplicatedEvent(event_id)) {
          alert('이미 예약된 시간입니다');
          event_handler.scheduler.setEventStartDate(event_id, edit_selected_date_from);
          event_handler.scheduler.setEventEndDate(event_id, edit_selected_date_to);
          return false;
        }

        var event_object = scheduler.getEvent(event_id);
        var from = event_handler.scheduler.getEventStartDate(event_id);
        var to = event_handler.scheduler.getEventEndDate(event_id);
        from = from.getFullYear() + '-' + (from.getMonth() + 1) + '-' + from.getDate() + ' ' + from.getHours() + ':' + from.getMinutes();
        to = to.getFullYear() + '-' + (to.getMonth() + 1) + '-' + to.getDate() + ' ' + to.getHours() + ':' + to.getMinutes();

        var postArg = {
          desc: event_handler.scheduler.getEventText(event_id),
          from: from,
          to: to,
          room_id: event_object.room_id
        };

        $.post('/rooms/event/' + event_id, postArg, function (dat) {
            if (dat != '1') {
              alert(dat);
              event_handler.scheduler.setEventStartDate(event_id, edit_selected_date_from);
              event_handler.scheduler.setEventEndDate(event_id, edit_selected_date_to);
            }
          }
        );
        return true;
      };

      this.onEventCreated = function (event_id) {
        try {
          event_handler.scheduler.getEvent(event_id).text = '[예약자] {{ name }}\n[예약내용] ';
          event_handler.scheduler.updateEvent(event_id);
        } catch (e) {
        }
        return true;
      };

      this.isDuplicatedEvent = function (event_id) {
        var event_object = event_handler.scheduler.getEvent(event_id);
        var evs = event_handler.scheduler.getEvents(event_object.start_date, event_object.end_date);

        for (var k in evs) {
          if (!evs.hasOwnProperty(k)) {
            continue;
          }
          if (evs[k].id == event_id) {
            continue;
          }
          if (evs[k].room_id != event_object.room_id) {
            continue;
          }
          return true;
        }
        return false;
      };

      this.onEventAdded = function (event_id, event_object) {
        if (this.isDuplicatedEvent(event_id)) {
          alert('이미 예약된 시간입니다');
          event_handler.scheduler.deleteEvent(event_id);
          return false;
        }

        var from = event_handler.scheduler.getEventStartDate(event_id);
        var to = event_handler.scheduler.getEventEndDate(event_id);
        from = from.getFullYear() + '-' + (from.getMonth() + 1) + '-' + from.getDate() + ' ' + from.getHours() + ':' + from.getMinutes();
        to = to.getFullYear() + '-' + (to.getMonth() + 1) + '-' + to.getDate() + ' ' + to.getHours() + ':' + to.getMinutes();

        $.post('/rooms/event', {
            desc: event_handler.scheduler.getEventText(event_id),
            from: from,
            to: to,
            room_id: event_object.room_id
          }, function (dat) {
            try {
              var new_event_id = parseInt(dat);
              if (isNaN(new_event_id) || new_event_id == 0) {
                alert(dat);
                event_handler.scheduler.deleteEvent(event_id);
              }
              else {
                event_handler.scheduler.changeEventId(event_id, new_event_id);
              }
            }
            catch (e) {
              alert('이벤트 추가가 실패하였습니다');
              event_handler.scheduler.deleteEvent(event_id);
            }
          }
        );
        return true;
      };

      this.onBeforeEventDelete = function (event_id, event) {
        if (event.group) {
          return false;
        }

        $.ajax({
          url: '/rooms/event/' + event_id,
          type: 'DELETE',
        });

        return true;
      };
    };

    scheduler.attachEvent('onEventCreated', event_handler.handler_helper('onEventCreated'));
    scheduler.attachEvent('onEventAdded', event_handler.handler_helper('onEventAdded'));
    scheduler.attachEvent('onBeforeDrag', event_handler.handler_helper('beforeEdit'));
    scheduler.attachEvent('onDblClick', event_handler.handler_helper('beforeEdit'));
    scheduler.attachEvent('onClick', event_handler.handler_helper('beforeEdit'));
    scheduler.attachEvent('onEventChanged', event_handler.handler_helper('afterEdit'));
    scheduler.attachEvent('onBeforeEventDelete', event_handler.handler_helper('onBeforeEventDelete'));

    scheduler.config.mark_now = true;
    scheduler.config.first_hour = 10;
    scheduler.config.last_hour = 22;
    scheduler.config.time_step = 15;
    scheduler.config.hour_size_px = 88;
    scheduler.config.xml_date = '%Y-%m-%d %H:%i';
    scheduler.config.default_date = '%Y/%m/%d %D';
    scheduler.config.day_date = '%m/%d';
    scheduler.config.icons_select = ['icon_edit', 'icon_delete'];
    scheduler.config.show_loading = true;
    scheduler.config.details_on_dblczlick = false;
    scheduler.config.multi_day = true;

    scheduler.templates.event_class = function(start, end, event) {
      return event.group ? 'group' : '';
    };

    scheduler.templates.event_text = function (start, end, event) {
      if (!event.group) {
        return event.text;
      }

      var daysOfWeekMap = ['월', '화', '수', '목', '금'];
      var daysOfWeek = event.days_of_week.split(',').map(function (day) {
        return daysOfWeekMap[day-1];
      }).join(',');

      if (daysOfWeek === '월,화,수,목,금' || daysOfWeek.length === 0) {
        daysOfWeek = '매일';
      } else {
        daysOfWeek += '요일';
      }

      return daysOfWeek+ ' 정기예약' + '<br>' + event.text;
    };

    scheduler.renderEvent = function (container, event) {
      if ((event.end_date - event.start_date)/60000 > 15) {
        return false;
      }

      var container_width = container.style.width;
      var container_height = parseInt(container.style.height, 10)/2;

      var html = '<div class="dhx_event_move dhx_header" style="margin: 0px; padding: 0px; width: ' + container_width + ';"></div>';
      html += '<div class="dhx_event_move dhx_body" style="margin: 0px; padding: 0px; height: ' + container_height + ';">';

      html += '<span class="dhx_title">'
        + scheduler.templates.event_date(event.start_date)
        + ' - ' + scheduler.templates.event_date(event.end_date)
        + '</span>';
      html += '<span style="margin-left: 5px">'
        + scheduler.templates.event_text(event.start_date,event.end_date,event)
        + '</span>';

      html += '</div>';
      html += '<div class="dhx_event_resize dhx_footer" style="width: ' + container_width + '"></div>';
      container.innerHTML = html;
      return true;
    };

    var sections = {{ sections|json_encode()|raw }};
    var room_ids = sections.map(function (section) {
      return section.key;
    });

    var unitViewOption = {
      name: 'unit_view',
      property: 'room_id',
      list: sections,
    };

    if (window.innerWidth < 980) {
      unitViewOption.size = 1;
      unitViewOption.step = 1;
    }

    scheduler.createUnitsView(unitViewOption);
    scheduler.init('scheduler_here', null, 'unit_view');
    scheduler.setLoadMode('day');
    scheduler.load('/rooms/event?room_ids=' + room_ids.join(','), 'json');
  }

  require(['jquery'], function ($) {
    $(init($));
  });
</script>
